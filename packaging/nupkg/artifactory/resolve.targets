<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
	In order to resolve artifacts (Nuget packages) from Artifactory, we include the Artifactory Nuget repository, 
    as it is configured in the 'artifactory.build' file. 
    Setting 'Resolve-Enable' to false in 'artifactory.build' cancels the override.
  -->


  <ItemGroup Condition="'$(Resolve-ArtifactoryUserName)' == '' " >
    <Resolve-ArtifactoryUserName Include="$(ArtifactoryUserName)"  />
  </ItemGroup>
  <ItemGroup Condition="'$(Resolve-ArtifactoryUserName)' != '' " >
    <Resolve-ArtifactoryUserName Include="$(Resolve-ArtifactoryUserName)"  />
  </ItemGroup>
  <ItemGroup Condition="'$(Resolve-ArtifactoryPassword)' == '' " >
    <Resolve-ArtifactoryPassword Include="$(ArtifactoryPassword)"  />
  </ItemGroup>
  <ItemGroup Condition="'$(Resolve-ArtifactoryPassword)' != '' " >
    <Resolve-ArtifactoryPassword Include="$(Resolve-ArtifactoryPassword)"  />
  </ItemGroup>


  <ItemGroup Condition="'$(Resolve-Enable)' == 'true' AND '$(Resolve-ArtifactoryUrl)' != '' AND '$(Resolve-Repository)' != ''  
                            AND '@(Resolve-ArtifactoryUserName)' != '' AND '@(Resolve-ArtifactoryPassword)' != '' AND '$(NuGetToolsPath)' != '' ">
    <ValidateResolution Include="true"/>
  </ItemGroup>

  <ItemGroup Condition=" @(ValidateResolution) == 'true' AND '$(PackageSources)' == '' ">
    <PackageSource Include="$(Resolve-ArtifactoryUrl)/api/nuget/$(Resolve-Repository)" />
  </ItemGroup>

  <!-- 
      Updating the resolution credentials in the NuGet.Config file (under .nuget)  
  -->
  <Target Name="InitCredentialsPackages" BeforeTargets="RestorePackages">
    <Exec Command="attrib -R $(NuGetToolsPath)\NuGet.Config" ContinueOnError="true" Condition=" @(ValidateResolution) == 'true' "/>
    <Exec Command="$(UpdateCommand)" ContinueOnError="true" Condition=" @(ValidateResolution) == 'true' AND @(PackageSource) != '' ">
      <Output TaskParameter="exitcode" ItemName="exitcodes"/>
    </Exec>

    <Exec Command="$(AddCommand)" ContinueOnError="true" Condition=" @(ValidateResolution) == 'true' AND '%(exitcodes.identity)'>0 AND @(PackageSource) != '' ">
    </Exec>
  </Target>

  <PropertyGroup>
    <!-- Commands -->
    <UpdateCommand>$(NuGetCommand) sources Update -Name Artifactory -Source @(PackageSource) -UserName @(Resolve-ArtifactoryUserName) -Password @(Resolve-ArtifactoryPassword) -Config "$(NuGetToolsPath)\NuGet.Config"</UpdateCommand>
    <AddCommand>$(NuGetCommand) sources Add -Name Artifactory -Source @(PackageSource) -UserName @(Resolve-ArtifactoryUserName) -Password @(Resolve-ArtifactoryPassword) -Config "$(NuGetToolsPath)\NuGet.Config"</AddCommand>
  </PropertyGroup>

  <Import Project="$(solutionDir)\.artifactory\artifactory.build" Condition="Exists('$(solutionDir)\.artifactory\artifactory.build')"/>

  <UsingTask TaskName="CleanNugetConfig" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <SolutionDirectory ParameterType="System.String" Required="true" />
      <Result ParameterType="System.Int32" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq"/>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="System.Xml.Linq" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                try {
                    Log.LogMessage("Downloading latest version of NuGet.exe...");
                    Log.LogMessage(SolutionDirectory);                   
                    
                    SolutionDirectory = Path.GetFullPath(SolutionDirectory);
                    string nugetConfigPath = SolutionDirectory + ".nuget\\NuGet.Config";
                    var nugetConfigXml = XDocument.Load(nugetConfigPath);
                                       
                    //Look for Artifactory source
                    if (nugetConfigXml.Root.Element("packageSources") != null)
                    {
                      var artifactorySource = nugetConfigXml.Root.Element("packageSources").Elements("add").FirstOrDefault(x => x.Attribute("key").Value.Equals("MSBuild-Artifactory"));
                      if (artifactorySource != null) 
                      {
                          artifactorySource.Remove();
                      }
                    }
                    
                    //Look for Artifactory-credentials
                    if (nugetConfigXml.Root.Element("packageSourceCredentials") != null)
                    {
                      var artifactorySourceCredential = nugetConfigXml.Root.Element("packageSourceCredentials").Element("MSBuild-Artifactory");
                      if (artifactorySourceCredential != null)
                      {
                          artifactorySourceCredential.Remove();
                      }
                    }
                    nugetConfigXml.Save(nugetConfigPath);                                   
                    
                    Result = System.Diagnostics.Process.GetCurrentProcess().Id;
                    
                    return true;
                }
                catch (Exception ex) {
                    Log.LogErrorFromException(ex);
                    Result = -1;
                    
                    return false;
                }
            ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>